name: deploy

on:
  workflow_call:
    inputs:
      oidc_role:
        required: true
        type: string
      region:
        required: true
        type: string
      terraform_dir:
        type: string
        required: true
      environment:
        type: string
        required: true

env:
  ENV: ${{ inputs.environment }}
  TF_VER: '0.14.11'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions: 
      id-token: write
      contents: write
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq #sudo yum install -y jq 

      - name: Get Latest Release
        id: get_latest_tag
        run: |
          if [[ "${ENV}" == "prod" ]]; then
            # Fetch the releases using the GitHub API with authentication
            releases=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases")
            # Get the latest release tag name
            latest_tag=$(echo "$releases" | jq -r '.[0].tag_name')
            echo "tag=$latest_tag" >> $GITHUB_OUTPUT
          else
            # Fetch the tags using the GitHub API with authentication
            tags=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/tags")
            # Get the latest tag name
            latest_tag=$(echo "$tags" | jq -r '.[0].name')
            echo "tag=$latest_tag" >> $GITHUB_OUTPUT
          fi

      - name: Display Latest Tag
        run: |
          # Access the latest_tag output from the previous step
          echo "Latest Tag: ${{ steps.get_latest_tag.outputs.tag }}"

      - uses: actions/checkout@v3
        name: checkout repo code 
        with:
          ref: ${{ github.event.base_ref }} 
  

      - name: Configure AWS credentials for ${{ inputs.environment }} ENV
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ inputs.oidc_role }}
          aws-region: ${{ inputs.region }}

      - name: Confirm logged in user
        run: |
          aws sts get-caller-identity

      - name: setup nodejs
        uses: actions/setup-node@v3
        with:
          node-version: "14"
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${TF_VER}
  
      - name: Terraform apply
        run: |
            cd ${{inputs.terraform_dir}}
            sed -i 's/^image_release = .*/image_release = "${{ steps.get_latest_tag.outputs.tag }}"/' ./env/${ENV}.tfvars
            terraform init -backend-config=./env/${ENV}-backend.hcl -reconfigure
            terraform apply -var-file=./env/${ENV}.tfvars --auto-approve
            terraform fmt

      - name: create pull request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.AUTOMATION_TOKEN }}
          author: boldlinksig <boldlinksig@boldlink.io>
          committer: boldlinksig <boldlinksig@boldlink.io>
          commit-message: docker image release updated tfvars file
          branch: vars-file-update
          base: main
          delete-branch: true
          title: '[automation] updated image release in ${ENV}.tfvars file.'
          body: 'This an automated PR to update image release in ${ENV}.tfvars file'
          labels: |
                no-release

          