name: docker-build-and-push

on:
  push:
    tags:
      - '[0-99]+.[0-99]+.[0-99]+rc[0-9]+'

permissions:
  id-token: write # This permission is required to authorize the request for the GitHub OIDC token used by the configure-aws-credentials action
  contents: write  # This is required for actions/checkout & committing changes back to the PR

env:
  ECR_REPOSITORY: <name_of_ecr_repository>
  TF_VERSION: 0.14.11
  AWS_REGION: <aws_region_here>
  OIDC_ROLE: arn:aws:iam::<provide_account_ID_here>:role/<name_of_the_iam_role>
  TF_DIR: ./terraform #path to directory containing terraform files
  SRC_DIR: ./src #path to directory containing Dockerfile
  ENV: dev #environment to deploy the application to
  
jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    outputs:
      sha-tag: ${{ steps.rc-tag.outputs.tag }}    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.base_ref }}
          token: ${{ secrets.AUTOMATION_TOKEN }}

      - name: Configure AWS credentials.
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.OIDC_ROLE }}

      - name: Log in to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get latest tag pushed
        id: rc-tag
        run: echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT

      - name: Tag image for Amazon ECR
        id: ecr-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.rc-tag.outputs.tag }}
        run: |
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.SRC_DIR }}
          load: true # make the image available for the workflow
          tags: ${{ steps.ecr-image.outputs.image }}
          cache-from: type=gha # use the GitHub Cache API
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.ecr-image.outputs.image }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"          

      - name: Run Dockle image linter
        uses: hands-lab/dockle-action@v1
        with:
          image: ${{ steps.ecr-image.outputs.image }}
          exit-code: "1"

      - name: Push Docker image to ECR with rc tag.
        run: |
          docker push ${{ steps.ecr-image.outputs.image }}

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Deploy image to aws ecs using terraform
        run: |
            cd ${{ env.TF_DIR }}
            sed -E -i '/^image\s+=\s+".*"/ s~(image\s+=\s+)"[^"]*"~\1"${{ steps.ecr-image.outputs.image }}"~' ./env/${ENV}.tfvars
            terraform init -backend-config=./env/${ENV}-backend.hcl -reconfigure
            terraform apply -var-file=./env/${ENV}.tfvars --auto-approve

      - name: Persist Image value changes in variables.tf!
        uses: EndBug/add-and-commit@v9
        with:
          message: '[Boldlinksig]: persist the changes done to variables.tf file. New image value added'
          author_name: boldlinksig
          author_email: boldlinksig@boldlink.io
          committer_name: boldlinksig
          committer_email: boldlinksig@boldlink.io
